/*
 * Shopping cart API
 * Manages a shopping cart
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: stephan.fuhrmann@ionos.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ionos.demo.shoppingcart.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.ionos.demo.shoppingcart.openapi.ApiCallback;
import com.ionos.demo.shoppingcart.openapi.ApiClient;
import com.ionos.demo.shoppingcart.openapi.ApiException;
import com.ionos.demo.shoppingcart.openapi.ApiResponse;
import com.ionos.demo.shoppingcart.openapi.Configuration;
import com.ionos.demo.shoppingcart.openapi.Pair;
import com.ionos.demo.shoppingcart.openapi.model.ShoppingCartItem;
import com.ionos.demo.shoppingcart.openapi.model.ShoppingCartObject;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MiddlewareApi {
  private ApiClient localVarApiClient;

  public MiddlewareApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MiddlewareApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for deleteCartById
   *
   * @param cartId (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteCartByIdCall(String cartId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/cart/{cartId}"
            .replaceAll(
                "\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteCartByIdValidateBeforeCall(String cartId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'cartId' is set
    if (cartId == null) {
      throw new ApiException(
          "Missing the required parameter 'cartId' when calling deleteCartById(Async)");
    }

    okhttp3.Call localVarCall = deleteCartByIdCall(cartId, _callback);
    return localVarCall;
  }

  /**
   * Deletes the shopping cart.
   *
   * @param cartId (required)
   * @return ShoppingCartObject
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ShoppingCartObject deleteCartById(String cartId) throws ApiException {
    ApiResponse<ShoppingCartObject> localVarResp = deleteCartByIdWithHttpInfo(cartId);
    return localVarResp.getData();
  }

  /**
   * Deletes the shopping cart.
   *
   * @param cartId (required)
   * @return ApiResponse&lt;ShoppingCartObject&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ShoppingCartObject> deleteCartByIdWithHttpInfo(String cartId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteCartByIdValidateBeforeCall(cartId, null);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Deletes the shopping cart.
   *
   * @param cartId (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteCartByIdAsync(
      String cartId, final ApiCallback<ShoppingCartObject> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteCartByIdValidateBeforeCall(cartId, _callback);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getCartById
   *
   * @param cartId (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getCartByIdCall(String cartId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/cart/{cartId}"
            .replaceAll(
                "\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCartByIdValidateBeforeCall(String cartId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'cartId' is set
    if (cartId == null) {
      throw new ApiException(
          "Missing the required parameter 'cartId' when calling getCartById(Async)");
    }

    okhttp3.Call localVarCall = getCartByIdCall(cartId, _callback);
    return localVarCall;
  }

  /**
   * Gets the shopping cart.
   *
   * @param cartId (required)
   * @return ShoppingCartObject
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ShoppingCartObject getCartById(String cartId) throws ApiException {
    ApiResponse<ShoppingCartObject> localVarResp = getCartByIdWithHttpInfo(cartId);
    return localVarResp.getData();
  }

  /**
   * Gets the shopping cart.
   *
   * @param cartId (required)
   * @return ApiResponse&lt;ShoppingCartObject&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ShoppingCartObject> getCartByIdWithHttpInfo(String cartId)
      throws ApiException {
    okhttp3.Call localVarCall = getCartByIdValidateBeforeCall(cartId, null);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Gets the shopping cart.
   *
   * @param cartId (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getCartByIdAsync(
      String cartId, final ApiCallback<ShoppingCartObject> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCartByIdValidateBeforeCall(cartId, _callback);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getCartItems
   *
   * @param cartId (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getCartItemsCall(String cartId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/cart/{cartId}/items"
            .replaceAll(
                "\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCartItemsValidateBeforeCall(String cartId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'cartId' is set
    if (cartId == null) {
      throw new ApiException(
          "Missing the required parameter 'cartId' when calling getCartItems(Async)");
    }

    okhttp3.Call localVarCall = getCartItemsCall(cartId, _callback);
    return localVarCall;
  }

  /**
   * Gets the shopping cart items.
   *
   * @param cartId (required)
   * @return List&lt;ShoppingCartItem&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public List<ShoppingCartItem> getCartItems(String cartId) throws ApiException {
    ApiResponse<List<ShoppingCartItem>> localVarResp = getCartItemsWithHttpInfo(cartId);
    return localVarResp.getData();
  }

  /**
   * Gets the shopping cart items.
   *
   * @param cartId (required)
   * @return ApiResponse&lt;List&lt;ShoppingCartItem&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ShoppingCartItem>> getCartItemsWithHttpInfo(String cartId)
      throws ApiException {
    okhttp3.Call localVarCall = getCartItemsValidateBeforeCall(cartId, null);
    Type localVarReturnType = new TypeToken<List<ShoppingCartItem>>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Gets the shopping cart items.
   *
   * @param cartId (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getCartItemsAsync(
      String cartId, final ApiCallback<List<ShoppingCartItem>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCartItemsValidateBeforeCall(cartId, _callback);
    Type localVarReturnType = new TypeToken<List<ShoppingCartItem>>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for listCarts
   *
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart list. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call listCartsCall(final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/carts";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call listCartsValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {

    okhttp3.Call localVarCall = listCartsCall(_callback);
    return localVarCall;
  }

  /**
   * Lists all shopping carts.
   *
   * @return List&lt;ShoppingCartObject&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart list. </td><td>  -  </td></tr>
   * </table>
   */
  public List<ShoppingCartObject> listCarts() throws ApiException {
    ApiResponse<List<ShoppingCartObject>> localVarResp = listCartsWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Lists all shopping carts.
   *
   * @return ApiResponse&lt;List&lt;ShoppingCartObject&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart list. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ShoppingCartObject>> listCartsWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = listCartsValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<List<ShoppingCartObject>>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Lists all shopping carts.
   *
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart list. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call listCartsAsync(final ApiCallback<List<ShoppingCartObject>> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = listCartsValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<List<ShoppingCartObject>>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for newCart
   *
   * @param shoppingCartObject (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call newCartCall(
      ShoppingCartObject shoppingCartObject, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = shoppingCartObject;

    // create path and map variables
    String localVarPath = "/carts";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call newCartValidateBeforeCall(
      ShoppingCartObject shoppingCartObject, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'shoppingCartObject' is set
    if (shoppingCartObject == null) {
      throw new ApiException(
          "Missing the required parameter 'shoppingCartObject' when calling newCart(Async)");
    }

    okhttp3.Call localVarCall = newCartCall(shoppingCartObject, _callback);
    return localVarCall;
  }

  /**
   * Creates a new shopping cart.
   *
   * @param shoppingCartObject (required)
   * @return ShoppingCartObject
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ShoppingCartObject newCart(ShoppingCartObject shoppingCartObject) throws ApiException {
    ApiResponse<ShoppingCartObject> localVarResp = newCartWithHttpInfo(shoppingCartObject);
    return localVarResp.getData();
  }

  /**
   * Creates a new shopping cart.
   *
   * @param shoppingCartObject (required)
   * @return ApiResponse&lt;ShoppingCartObject&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ShoppingCartObject> newCartWithHttpInfo(ShoppingCartObject shoppingCartObject)
      throws ApiException {
    okhttp3.Call localVarCall = newCartValidateBeforeCall(shoppingCartObject, null);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Creates a new shopping cart.
   *
   * @param shoppingCartObject (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call newCartAsync(
      ShoppingCartObject shoppingCartObject, final ApiCallback<ShoppingCartObject> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = newCartValidateBeforeCall(shoppingCartObject, _callback);
    Type localVarReturnType = new TypeToken<ShoppingCartObject>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for putCartItems
   *
   * @param cartId (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putCartItemsCall(String cartId, final ApiCallback _callback)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/cart/{cartId}/items"
            .replaceAll(
                "\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putCartItemsValidateBeforeCall(String cartId, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'cartId' is set
    if (cartId == null) {
      throw new ApiException(
          "Missing the required parameter 'cartId' when calling putCartItems(Async)");
    }

    okhttp3.Call localVarCall = putCartItemsCall(cartId, _callback);
    return localVarCall;
  }

  /**
   * Updates the shopping cart items.
   *
   * @param cartId (required)
   * @return List&lt;ShoppingCartItem&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public List<ShoppingCartItem> putCartItems(String cartId) throws ApiException {
    ApiResponse<List<ShoppingCartItem>> localVarResp = putCartItemsWithHttpInfo(cartId);
    return localVarResp.getData();
  }

  /**
   * Updates the shopping cart items.
   *
   * @param cartId (required)
   * @return ApiResponse&lt;List&lt;ShoppingCartItem&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ShoppingCartItem>> putCartItemsWithHttpInfo(String cartId)
      throws ApiException {
    okhttp3.Call localVarCall = putCartItemsValidateBeforeCall(cartId, null);
    Type localVarReturnType = new TypeToken<List<ShoppingCartItem>>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * (asynchronously) Updates the shopping cart items.
   *
   * @param cartId (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The shopping cart service response. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putCartItemsAsync(
      String cartId, final ApiCallback<List<ShoppingCartItem>> _callback) throws ApiException {

    okhttp3.Call localVarCall = putCartItemsValidateBeforeCall(cartId, _callback);
    Type localVarReturnType = new TypeToken<List<ShoppingCartItem>>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
